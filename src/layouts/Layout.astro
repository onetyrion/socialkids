---
import Footer from "../components/elements/Footer.astro";
import Navbar from "../components/elements/Navbar.astro";
import { settings } from "../data/settings";

export interface Props {
  title: string;
  description: string;
	image?: string;
}

const title = Astro.props.title || settings.title;
const description = Astro.props.description || settings.description;
const canonicalURL = new URL(Astro.url.href, Astro.site);
const image = new URL(Astro.props.image || '', Astro.site);
---

<!doctype html>
<html lang="en">
  <head>

    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
    <!-- Favicon -->
    <link rel="icon" type="image/png" href="/favicon.png" />
    <!-- Primary Meta Tags -->
    <title>{title || settings.title}</title>
    <meta name="title" content={title || settings.title} />
    <meta name="description" content={description || settings.description} />
    <meta name="generator" content={Astro.generator} />
    
    <!-- <link rel="preload" href="/assets/images/bg.png" as="image"> -->
    <!-- settingsmap -->
    <link rel="sitemap" href="/sitemap-index.xml">
    
    <!-- Canonical -->
    <link rel="canonical" href={Astro.url.href} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={image} />
    
    <link
      href="https://fonts.googleapis.com/css2?family=Raleway:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body class="overflow-hidden overflow-y-auto bg-body">
    <Navbar />
    <slot />
    <Footer />
  </body>
  <script>
    const switchTheme = document.querySelector(
      "[data-switch-theme]"
    ) as HTMLButtonElement;

    if (
      localStorage.getItem("appTheme") === "dark" ||
      (!("appTheme" in localStorage) &&
        window.matchMedia("(prefers-color-scheme: dark)").matches)
    ) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
    if (switchTheme) {
      switchTheme.addEventListener("click", (e) => {
        e.preventDefault();
        const doc = document.documentElement;
        if (doc) {
          if (localStorage.getItem("appTheme")) {
            if (localStorage.getItem("appTheme") === "light") {
              doc.classList.add("dark");
              localStorage.setItem("appTheme", "dark");
            } else {
              document.documentElement.classList.remove("dark");
              localStorage.setItem("appTheme", "light");
            }
          } else {
            if (doc.classList.contains("dark")) {
              doc.classList.remove("dark");
              localStorage.setItem("appTheme", "light");
            } else {
              doc.classList.add("dark");
              localStorage.setItem("appTheme", "dark");
            }
          }
        }
      });
    }
  </script>
  <script>
    const toggleMenu = document.querySelector(
      "[data-toggle-nav]"
    ) as HTMLButtonElement;
    const navbar = document.querySelector("[data-navbar]") as HTMLDivElement;
    const overlayNav = document.querySelector(
      "[data-nav-overlay]"
    ) as HTMLDivElement;
    if (toggleMenu) {
      toggleMenu.addEventListener("click", (e) => {
        e.preventDefault();
        if (toggleMenu.getAttribute("data-open-nav") === "false") {
          toggleMenu.setAttribute("data-open-nav", "true");
          overlayNav.setAttribute("data-is-visible", "true");
          document.body.classList.add("!overflow-y-hidden");
          navbar.style.height = `${navbar.scrollHeight}px`;
        } else {
          toggleMenu.setAttribute("data-open-nav", "false");
          overlayNav.setAttribute("data-is-visible", "false");
          document.body.classList.remove("!overflow-y-hidden");
          navbar.style.height = "0px";
        }
      });

      navbar.addEventListener("click", () => {
        toggleMenu.setAttribute("data-open-nav", "false");
        overlayNav.setAttribute("data-is-visible", "false");
        document.body.classList.remove("!overflow-y-hidden");
        navbar.style.height = "0px";
      });

      overlayNav.addEventListener("click", () => {
        toggleMenu.setAttribute("data-open-nav", "false");
        overlayNav.setAttribute("data-is-visible", "false");
        document.body.classList.remove("!overflow-y-hidden");
        navbar.style.height = "0px";
      });
    }
  </script>
</html>
<style is:global>
  :root {
    --color-bg: 255 255 255;
    --color-border: 255 255 255;
    --color-box: 255 255 255;
    --box-border: 229 231 235;
    --box-sd: 226 232 240 / 0.5;
    --heading-1: 23 37 84;
    --heading-2: 31 41 55;
    --heading-3: 55 65 81;
  }

  .dark {
    --color-bg: 3 7 18;
    --color-box: 17 24 39;
    --box-border: 243 244 246/0.1;
    --box-sd: transparent;

    --heading-1: 255 255 255;
    --heading-2: 243 244 246;
    --heading-3: 209 213 219;
  }

  html {
    scroll-behavior: smooth;
  }
  body {
    font-family: "Raleway", sans-serif;
  }

  [data-toggle-nav][data-open-nav="true"] #line1 {
    transform: translateY(0.375rem) rotate(40deg);
  }
  [data-toggle-nav][data-open-nav="true"] #line2 {
    transform: scaleX(0);
    opacity: 0;
  }
  [data-toggle-nav][data-open-nav="true"] #line3 {
    transform: translateY(-0.375rem) rotate(-40deg);
  }

  [data-nav-overlay][data-is-visible="true"] {
    visibility: visible;
    display: flex;
  }
</style>
